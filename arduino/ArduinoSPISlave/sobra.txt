   //if ((gb_cont_nibble & 1) == 0)   
   // gb_nibble = CharHexToDec(gb_aux);
   //else      
   // gb_buf[gb_cont_buf++]= (gb_nibble|(CharHexToDec(gb_aux)<<4));
   //gb_cont_nibble++;

 if ((gb_aux==42) || (gb_aux==35) || (gb_aux==36) || (gb_aux==37))
 {
  //data_buff[begin_buttons0] = 0xFF; //Ponemos a 0 los botones   
  //data_buff[begin_buttons1] = 0xFF;
  switch (gb_aux)
  {
   case 42: gbUseFlag=1; //Asterisco
    gbUseReadNumByte = 1; //Leo 1 byte 2 caracteres Uso flag
    break;
   case 35: gbUseFlag=0; //#
    gbUseReadNumByte = 1; //Leo 1 byte 2 caracteres
    break;
   case 36: gbUseFlag=1; //$
    gbUseReadNumByte = 2; //Leo 2 bytes (4 caracteres)
    break;    
   case 37: gbUseFlag=1; //%
    gbUseReadNumByte = 5; //Leo 5 bytes (10 caracteres) Mando analogico 5 bytes
    break;        
   default: gbUseFlag=1;
    gbUseReadNumByte = 1; //Leo 1 byte 2 caracteres
    break;
  } 
  gb_cont_buf=0; //Vaciamos buffer serie  
  gb_aux=0;
  Serial.end(); 
  Serial.begin(9600);
 }
 else
 
 {
  //if (gb_aux==13)//Para test arduino consola
  if (gb_aux==10)
  {
   gb_aux=0;
   if (gbUseFlag == 1)
   {
    switch (gbUseReadNumByte)
    {     
     case 1:         
     Serial.print("(");
     Serial.print(gb_cont_buf);
     Serial.print(")");
     for (uint8_t i=0;i<gb_cont_buf;i+=2)
     {
      //data_buff[begin_buttons0] = 0xFE; //Boton select como flag 11111110
      //data_buff[begin_buttons1] = gb_buf[i]; //Ponemos a 0 los botones sin logica negada            
      uint8_t aux = (((gb_buf[i+1]<<4)|gb_buf[i])&0xFF);
      data_buff[begin_buttons1] = aux; //Ponemos a 0 los botones sin logica negada      
      //data_buff[begin_buttons0] = 0xFE; //Boton select como flag 11111110
      //for (uint8_t j=0;j<25;j++)
      // delayMicroseconds(1000);
      //data_buff[begin_buttons0] = 0xFF; //Ponemos a 0 los botones
      //data_buff[begin_buttons1] = 0xFF;
      //for (uint8_t j=0;j<25;j++)
      // delayMicroseconds(1000);       
      Serial.print(aux,HEX);           
     }
     Serial.flush();
     break;
     default: break;
/*     case 2:       
      for (uint8_t i=0;i<gb_cont_buf;i+=2)
      {              
       //gb_low = (CharHexToDec(gb_buf[i+1])<<4)|CharHexToDec(gb_buf[i]);
       //gb_high = ((CharHexToDec(gb_buf[i+3])<<4)|CharHexToDec(gb_buf[i+2])) & 0x7F;  //Boton izquierda flag
       data_buff[begin_buttons1] = gb_buf[i]; //gb_low; //Ponemos a 0 los botones sin logica negada
       data_buff[begin_buttons0] = ((gb_buf[i+1])&0x7F); //gb_high;
       for (uint8_t j=0;j<25;j++)
        delayMicroseconds(1000);    
       data_buff[begin_buttons0] = 0xFF; //Ponemos a 0 los botones
       data_buff[begin_buttons1] = 0xFF;
       for (uint8_t j=0;j<25;j++)
        delayMicroseconds(1000);          
      }      
      break;
     case 5: 
      for (uint8_t i=0;i<gb_cont_buf;i+=5)
      {                             
       data_buff[3] = gb_buf[0]; //Ponemos a 0 los botones sin logica negada       
       data_buff[2] = 0xFE; //Boton select como flag 11111110       
       for (uint8_t j=0;j<4;j++)       
        data_buff[j+4] = gb_buf[j+1]; //Right Joy X
       //data_buff[5] = gb_buf[2];   //Right Joy Y
       //data_buff[6] = gb_buf[3]; //Left Joy X
       //data_buff[7] = gb_buf[4]; //Left Joy Y
       //for (uint8_t j=0;j<25;j++)
       // delayMicroseconds(1000);    
       //data_buff[2] = 0xFF; //Ponemos a 0 los botones
       //data_buff[3] = 0xFF;
       //for (uint8_t j=0;j<25;j++)
       // delayMicroseconds(1000);        
      }     
     break;
     
/*    }
   }
   else
   {//No usamos flag
/*    switch (gbUseReadNumByte)
    {
     case 1:
      for (uint8_t i=0;i<gb_cont_buf;i++)
      {
       //gb_low = (CharHexToDec(gb_buf[i+1])<<4)|CharHexToDec(gb_buf[i]);
       data_buff[begin_buttons1] = gb_buf[i]; //Ponemos a 0 los botones sin logica negada
       data_buff[begin_buttons0] = 0xFE | gb_flipflop; //Boton select como flag 11111110
       gb_flipflop = (!gb_flipflop) & 0x01;
       for (uint8_t j=0;j<25;j++)
       delayMicroseconds(1000);
      }       
      break;
    }*/
   /*}
   gb_cont_buf = 0;
  }
 }
 
}*/
